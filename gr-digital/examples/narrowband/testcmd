sudo ./tunnel_w_sensor.py --rx-freq=908M --tx-freq=800M --sx-freq=1800M --sx-samprate=200000 --rx-addr="addr=192.168.10.109" --tx-addr="addr=192.168.10.109" --sx-addr="addr=192.168.10.108" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=head    --samp-num=1024

sudo ./tunnel_w_sensor.py --rx-freq=908M --tx-freq=800M --sx-freq=1800M --sx-samprate=1020408 --rx-addr="addr=192.168.10.107" --tx-addr="addr=192.168.10.107" --sx-addr="addr=192.168.10.106" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=head    --samp-num=1024

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=200000 --rx-addr="addr=192.168.10.107" --tx-addr="addr=192.168.10.107" --sx-addr="addr=192.168.10.106" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 0 -d 128 

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=200000 --rx-addr="addr=192.168.10.109" --tx-addr="addr=192.168.10.109" --sx-addr="addr=192.168.10.108" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 0 -d 128

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=200000 --rx-addr="addr=192.168.10.127" --tx-addr="addr=192.168.10.127" --sx-addr="addr=192.168.10.126" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 0 -d 128

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=200000 --rx-addr="addr=192.168.10.123" --tx-addr="addr=192.168.10.123" --sx-addr="addr=192.168.10.124" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 0 -d 128

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=1020408 --rx-addr="addr=192.168.10.130" --tx-addr="addr=192.168.10.130" --sx-addr="addr=192.168.10.133" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 1 -d 128

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=1020408 --rx-addr="addr=192.168.10.129" --tx-addr="addr=192.168.10.129" --sx-addr="addr=192.168.10.128" --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 1 -d 128

sudo ./tunnel_w_sensor.py --rx-freq=908M --tx-freq=800M --sx-freq=1800M --sx-samprate=200000 --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=head  --samp-num=1024

sudo ./tunnel_w_sensor.py --rx-freq=800M --tx-freq=908M --sx-freq=1800M --sx-samprate=200000 --bitrate=2000000 --tx-amplitude=1 --rx-gain=15 --node-type=node -i 1 -d 128

usrp = uhd.usrp_source(device_addr="addr=192.168.10.106", stream_args=uhd.stream_args('fc32'))
usrp = uhd.usrp_source(device_addr="addr=192.168.10.133", stream_args=uhd.stream_args('fc32'))
usrp = uhd.usrp_source(device_addr="addr=192.168.10.108", stream_args=uhd.stream_args('fc32'))
t = usrp.get_time_now().get_real_secs()

sudo ./tunnel_duplex_test.py --rx-freq=800M --tx-freq=908M --tx-amplitude=1 --rx-gain=15 --bitrate=500000
sudo ./tunnel_duplex_test.py --rx-freq=908M --tx-freq=800M --tx-amplitude=1 --rx-gain=15 --bitrate=500000


from gnuradio import uhd
import numpy as np
#import matplotlib.pyplot as plt
#import pylab

CENTER = 1e9
samp_rate = 200000
usrp = uhd.usrp_source(device_addr="addr0=192.168.10.160, ",
stream_args=uhd.stream_args(cpu_format="fc32",channels=range(1),),)
usrp.set_clock_source("external", 0)
usrp.set_time_source("external", 0)
usrp.set_samp_rate(samp_rate)
usrp.set_center_freq(CENTER, 0)
usrp.set_gain(20, 0)
usrp.set_antenna("RX2", 0)
usrp.set_start_on_demand()

devices = uhd.find_devices_raw()
n_devices = len(devices)
addrs = []
for i in range(n_devices):
    addr_t = devices[i].to_string()
    addrs.append(addr_t[11:31])
    addrs[i]

usrp0 = uhd.usrp_source(device_addr=addrs[0], stream_args=uhd.stream_args(cpu_format="fc32",channels=range(1),),)
usrp1 = uhd.usrp_source(device_addr=addrs[1], stream_args=uhd.stream_args(cpu_format="fc32",channels=range(1),),)

usrp1.set_time_source("mimo",0)

usrp0.get_time_source(0)
"gpsdo"
usrp0.get_time_source(0)
"mimo"

clk_cfg = uhd.clock_config()
clk_cfg.ref_source = uhd.clock_config.REF_MIMO
clk_cfg.pps_source = uhd.clock_config.PPS_MIMO
usrp1.set_clock_config(clk_cfg)


Ns = 600
L = 32
o_samps = usrp.finite_acquisition(int(20*samp_rate))
o_samps = np.array(np.real(o_samps[int(0.8*samp_rate):]))

f = open("sdata.dat","w")
o_samps.astype('float64').tofile(f) 

tr_r = []
tr_i = []
for i in range(len(o_samps)/Ns):
    samps = np.array(o_samps[i*Ns:(i+1)*Ns])
    samp_vect = np.array([])
    for j in range(Ns-L+1):
        samp_vect = np.concatenate((samp_vect,samps[j:j+L]),axis=0)
    samp_mtx = samp_vect.reshape(Ns-L+1,L).T
    samp_mtx_r = np.real(samp_mtx) 
    tr_r.append(np.trace(np.cov(samp_mtx_r))/L)
    samp_mtx_i = np.imag(samp_mtx)
    tr_i.append(np.trace(np.cov(samp_mtx_i))/L)

varn_r = np.var(np.real(o_samps))
vart_r = np.var(tr_r)
vart_r_th = (2*np.square(L)/Ns)*np.square(varn_r)



Ns = 600
L  = 8
SegL = Ns*L
samps = usrp.finite_acquisition(int(30*samp_rate))
samps = samps[int(0.1*samp_rate):]
tr_r = [] 
tr_i = []
for i in range(len(samps)/SegL):
    samp_vect = samps[i*SegL:(i+1)*SegL]
    samp_vect_real = np.real(samp_vect)
    samp_vect_imag = np.imag(samp_vect)
    samp_matrx_r = np.array(samp_vect_real).reshape(Ns,L).T
    tr_r.append(np.trace(np.cov(samp_matrx_r)))
    samp_matrx_i = np.array(samp_vect_imag).reshape(Ns,L).T
    tr_i.append(np.trace(np.cov(samp_matrx_i)))

varn_r = np.var(np.real(samps))
vart_r = np.var(tr_r)
vart_r_th = (2*np.square(L)/Ns)*np.square(varn_r)



Ns = 10
L = 4
samps = np.array(o_samps[0:Ns])
samp_vect = np.array([])
for j in range(Ns-L+1):
    samp_vect = np.concatenate((samp_vect,samps[j:j+L]),axis=0)
samp_mtx = samp_vect.reshape(Ns-L+1,L).T

  
  
y = np.square(np.random.randn(3000))
for i in range(600):
    y += np.square(np.random.randn(3000))
y = y/100
    

var = 0
for i in range(1):
    samps = usrp.finite_acquisition(int(0.15*samp_rate))
    print 'B', i
    abs_s = numpy.abs(samps)
    var = numpy.var(abs_s[int(0.08*samp_rate):]) + var

var = var/(1-0)

define cal_var_rand(Ns):
    L = 32
    o_samps = np.random.randn(int(15*samp_rate))
    tr_r = []
    tr_i = []
    for i in range(len(o_samps)/Ns):
        samps = np.array(o_samps[i*Ns:(i+1)*Ns])
        samp_vect = np.array([])
        for j in range(Ns-L+1):
            samp_vect = np.concatenate((samp_vect,samps[j:j+L]),axis=0)
        samp_mtx = samp_vect.reshape(Ns-L+1,L).T
        samp_mtx_r = np.real(samp_mtx) 
        tr_r.append(np.trace(np.cov(samp_mtx_r)))
        samp_mtx_i = np.imag(samp_mtx)
        tr_i.append(np.trace(np.cov(samp_mtx_i)))
    
    varn_r = np.var(o_samps)
    vart_r = np.var(tr_r)
    vart_r_th = (2.0*np.square(L)/Ns)*np.square(varn_r)
    retrun vart_r_th/vart_r

# tuple of all parallel python servers to connect with
ppservers = ()
#ppservers = ("10.0.0.1",)

if len(sys.argv) > 1:
    ncpus = int(sys.argv[1])
    # Creates jobserver with ncpus workers
    job_server = pp.Server(ncpus, ppservers=ppservers)
else:
    # Creates jobserver with automatically detected number of workers
    job_server = pp.Server(ppservers=ppservers)

print "Starting pp with", job_server.get_ncpus(), "workers"

# Submit a job of calulating sum_primes(100) for execution. 
# sum_primes - the function
# (100,) - tuple with arguments for Ns
# (isprime,) - tuple with functions on which function sum_primes depends
# ("math",) - tuple with module names which must be imported before sum_primes execution
# Execution starts as soon as one of the workers will become available
job1 = job_server.submit(sum_primes, (600,), (isprime,), ("numpy",))

# Retrieves the result calculated by job1
# The value of job1() is the same as sum_primes(100)
# If the job has not been finished yet, execution will wait here until result is available
result = job1()

###############################################3
# Test the BPSK Network Links
###############################################
./tdma_mon.py --node-type=node -f 918M --samp-rate=1M --link-rate=500k --node-index=0 --tx-only --tx-gain=15.5 -m bpsk
./tdma_mon.py --node-type=node -f 918M --samp-rate=1M --rx-gain=25 --link-rate=500k --node-index=1 --rx-only -m bpsk




